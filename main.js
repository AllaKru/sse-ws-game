(()=>{"use strict";var e,r,n,t,o,i,a,c={753:(e,r,n)=>{n(177);const t=new class{constructor(e){this.baseUrl=e}async api(e,r){const n=await fetch(this.baseUrl+e,r);if(!n.ok)throw new Error(`Api Error: ${n.statusText}`);const t=await n.json();return console.log(t),t}async post(e,r){return this.api(e,{method:"post",body:JSON.stringify(r),headers:{Accept:"application/json","Content-Type":"application/json; charset=utf-8"}})}}("https://sse-ws-game.onrender.com"),o=document.getElementsByTagName("body")[0];new class{constructor(e,r){"string"==typeof e&&(e=document.querySelector(e)),this.element=e,this.url=r,this.add=this.add.bind(this),this.onSubscribeData=this.onSubscribeData.bind(this),this.sse=new EventSource("https://sse-ws-game.onrender.com/sse"),this.sse.addEventListener("message",this.onSubscribeData)}add(){const e=document.createElement("div");e.className="window",this.element.append(e),t.api("/index"),t.api("/ping")}onSubscribeData(e){const r=document.createElement("div");r.className="main";const n=document.createElement("div");n.className="action ","Подождите немного... Обновляемся..."===e.data?(console.log(123456),n.className="reload ",r.className="main loading"):-1!==e.data.indexOf("Нарушение правил")?r.className="main sign":-1!==e.data.indexOf("Отличный удар")&&(r.className="main ball"),n.textContent=e.data,this.element.querySelector(".window").append(r),this.element.querySelectorAll(".main").forEach((e=>{e.append(n)})),console.log(e)}}(o).add()},783:(e,r,n)=>{var t=n(618),o=Object.create(null),i="undefined"==typeof document,a=Array.prototype.forEach;function c(){}function s(e,r){if(!r){if(!e.href)return;r=e.href.split("?")[0]}if(l(r)&&!1!==e.isLoaded&&r&&r.indexOf(".css")>-1){e.visited=!0;var n=e.cloneNode();n.isLoaded=!1,n.addEventListener("load",(function(){n.isLoaded=!0,e.parentNode.removeChild(e)})),n.addEventListener("error",(function(){n.isLoaded=!0,e.parentNode.removeChild(e)})),n.href="".concat(r,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(n,e.nextSibling):e.parentNode.appendChild(n)}}function d(){var e=document.querySelectorAll("link");a.call(e,(function(e){!0!==e.visited&&s(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,r){if(i)return console.log("no window.document found, will not HMR CSS"),c;var n,u,f=function(e){var r=o[e];if(!r){if(document.currentScript)r=document.currentScript.src;else{var n=document.getElementsByTagName("script"),i=n[n.length-1];i&&(r=i.src)}o[e]=r}return function(e){if(!r)return null;var n=r.split(/([^\\/]+)\.js$/),o=n&&n[1];return o&&e?e.split(",").map((function(e){var n=new RegExp("".concat(o,"\\.js$"),"g");return t(r.replace(n,"".concat(e.replace(/{fileName}/g,o),".css")))})):[r.replace(".js",".css")]}}(e);return n=function(){var e=f(r.filename),n=function(e){if(!e)return!1;var r=document.querySelectorAll("link"),n=!1;return a.call(r,(function(r){if(r.href){var o=function(e,r){var n;return e=t(e,{stripWWW:!1}),r.some((function(t){e.indexOf(r)>-1&&(n=t)})),n}(r.href,e);l(o)&&!0!==r.visited&&o&&(s(r,o),n=!0)}})),n}(e);if(r.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void d();n?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),d())},50,u=0,function(){var e=this,r=arguments,t=function(){return n.apply(e,r)};clearTimeout(u),u=setTimeout(t,50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var r=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",n=e.replace(new RegExp(r,"i"),"").split("/"),t=n[0].toLowerCase().replace(/\.$/,"");return n[0]="",r+t+n.reduce((function(e,r){switch(r){case"..":e.pop();break;case".":break;default:e.push(r)}return e}),[]).join("/")}},177:(e,r,n)=>{var t=n(783)(e.id,{locals:!1});e.hot.dispose(t),e.hot.accept(void 0,t)}},s={};function d(e){if(s[e])return s[e].exports;var r=s[e]={id:e,exports:{}},n={id:e,module:r,factory:c[e],require:d};return d.i.forEach((function(e){e(n)})),r=n.module,n.factory.call(r.exports,r,r.exports,n.require),r.exports}d.m=c,d.c=s,d.i=[],d.hu=e=>e+"."+d.h()+".hot-update.js",d.miniCssF=e=>"main.css",d.hmrF=()=>"main."+d.h()+".hot-update.json",d.h=()=>"ec0cf6fdc6680960521e",d.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="ajs:",d.l=(n,t,o)=>{if(e[n])e[n].push(t);else{var i,a;if(void 0!==o)for(var c=document.getElementsByTagName("script"),s=0;s<c.length;s++){var l=c[s];if(l.getAttribute("src")==n||l.getAttribute("data-webpack")==r+o){i=l;break}}i||(a=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,d.nc&&i.setAttribute("nonce",d.nc),i.setAttribute("data-webpack",r+o),i.src=n),e[n]=[t];var u=(r,t)=>{i.onerror=i.onload=null,clearTimeout(f);var o=e[n];if(delete e[n],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(t))),r)return r(t)},f=setTimeout(u.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=u.bind(null,i.onerror),i.onload=u.bind(null,i.onload),a&&document.head.appendChild(i)}},(()=>{var e,r,n,t,o={},i=d.c,a=[],c=[],s="idle";function l(e){s=e;for(var r=0;r<c.length;r++)c[r].call(null,e)}function u(e){if(0===r.length)return e();var n=r;return r=[],Promise.all(n).then((function(){return u(e)}))}function f(e){if("idle"!==s)throw new Error("check() is only allowed in idle status");return l("check"),d.hmrM().then((function(t){if(!t)return l(m()?"ready":"idle"),null;l("prepare");var o=[];return r=[],n=[],Promise.all(Object.keys(d.hmrC).reduce((function(e,r){return d.hmrC[r](t.c,t.r,t.m,e,n,o),e}),[])).then((function(){return u((function(){return e?h(e):(l("ready"),o)}))}))}))}function p(e){return"ready"!==s?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},m();var r=n.map((function(r){return r(e)}));n=void 0;var o,i=r.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return l("abort"),Promise.resolve().then((function(){throw i[0]}));l("dispose"),r.forEach((function(e){e.dispose&&e.dispose()})),l("apply");var a=function(e){o||(o=e)},c=[];return r.forEach((function(e){if(e.apply){var r=e.apply(a);if(r)for(var n=0;n<r.length;n++)c.push(r[n])}})),o?(l("fail"),Promise.resolve().then((function(){throw o}))):t?h(e).then((function(e){return c.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):(l("idle"),Promise.resolve(c))}function m(){if(t)return n||(n=[]),Object.keys(d.hmrI).forEach((function(e){t.forEach((function(r){d.hmrI[e](r,n)}))})),t=void 0,!0}d.hmrD=o,d.i.push((function(h){var m,v,y,g=h.module,b=function(n,t){var o=i[t];if(!o)return n;var c=function(r){if(o.hot.active){if(i[r]){var c=i[r].parents;-1===c.indexOf(t)&&c.push(t)}else a=[t],e=r;-1===o.children.indexOf(r)&&o.children.push(r)}else console.warn("[HMR] unexpected require("+r+") from disposed module "+t),a=[];return n(r)},d=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(r){n[e]=r}}};for(var f in n)Object.prototype.hasOwnProperty.call(n,f)&&"e"!==f&&Object.defineProperty(c,f,d(f));return c.e=function(e){return function(e){switch(s){case"ready":return l("prepare"),r.push(e),u((function(){l("ready")})),e;case"prepare":return r.push(e),e;default:return e}}(n.e(e))},c}(h.require,h.id);g.hot=(m=h.id,v=g,y={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==m,_requireSelf:function(){a=v.parents.slice(),e=m,d(m)},active:!0,accept:function(e,r){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._acceptedDependencies[e[n]]=r||function(){};else y._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._declinedDependencies[e[r]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=y._disposeHandlers.indexOf(e);r>=0&&y._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,s){case"idle":n=[],Object.keys(d.hmrI).forEach((function(e){d.hmrI[e](m,n)})),l("ready");break;case"ready":Object.keys(d.hmrI).forEach((function(e){d.hmrI[e](m,n)}));break;case"prepare":case"check":case"dispose":case"apply":(t=t||[]).push(m)}},check:f,apply:p,status:function(e){if(!e)return s;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var r=c.indexOf(e);r>=0&&c.splice(r,1)},data:o[m]},e=void 0,y),g.parents=a,g.children=[],a=[],h.require=b})),d.hmrC={},d.hmrI={}})(),d.p="",n=(e,r,n,t)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)n();else{var a=i&&("load"===i.type?"missing":i.type),c=i&&i.target&&i.target.href||r,s=new Error("Loading CSS chunk "+e+" failed.\n("+c+")");s.code="CSS_CHUNK_LOAD_FAILED",s.type=a,s.request=c,o.parentNode.removeChild(o),t(s)}},o.href=r,document.head.appendChild(o),o},t=(e,r)=>{for(var n=document.getElementsByTagName("link"),t=0;t<n.length;t++){var o=(a=n[t]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===e||o===r))return a}var i=document.getElementsByTagName("style");for(t=0;t<i.length;t++){var a;if((o=(a=i[t]).getAttribute("data-href"))===e||o===r)return a}},o=[],i=[],a=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var r=o[e];r.parentNode&&r.parentNode.removeChild(r)}o.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),d.hmrC.miniCss=(e,r,c,s,l,u)=>{l.push(a),e.forEach((e=>{var r=d.miniCssF(e),a=d.p+r;const c=t(r,a);c&&s.push(new Promise(((r,t)=>{var s=n(e,a,(()=>{s.as="style",s.rel="preload",r()}),t);o.push(c),i.push(s)})))}))},(()=>{var e,r,n,t,o={179:0},i={};function a(e){return new Promise(((r,n)=>{i[e]=r;var t=d.p+d.hu(e),o=new Error;d.l(t,(r=>{if(i[e]){i[e]=void 0;var t=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+t+": "+a+")",o.name="ChunkLoadError",o.type=t,o.request=a,n(o)}}))}))}function c(i){function a(e){for(var r=[e],n={},t=r.map((function(e){return{chain:[e],id:e}}));t.length>0;){var o=t.pop(),i=o.id,a=o.chain,s=d.c[i];if(s&&(!s.hot._selfAccepted||s.hot._selfInvalidated)){if(s.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(s.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var l=0;l<s.parents.length;l++){var u=s.parents[l],f=d.c[u];if(f){if(f.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([u]),moduleId:i,parentId:u};-1===r.indexOf(u)&&(f.hot._acceptedDependencies[i]?(n[u]||(n[u]=[]),c(n[u],[i])):(delete n[u],r.push(u),t.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:n}}function c(e,r){for(var n=0;n<r.length;n++){var t=r[n];-1===e.indexOf(t)&&e.push(t)}}d.f&&delete d.f.jsonpHmr,e=void 0;var s={},l=[],u={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(d.o(r,p)){var h,m=r[p],v=!1,y=!1,g=!1,b="";switch((h=m?a(p):{type:"disposed",moduleId:p}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(h),i.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":i.onAccepted&&i.onAccepted(h),y=!0;break;case"disposed":i.onDisposed&&i.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(y)for(p in u[p]=m,c(l,h.outdatedModules),h.outdatedDependencies)d.o(h.outdatedDependencies,p)&&(s[p]||(s[p]=[]),c(s[p],h.outdatedDependencies[p]));g&&(c(l,[h.moduleId]),u[p]=f)}r=void 0;for(var E,w=[],D=0;D<l.length;D++){var _=l[D];d.c[_]&&d.c[_].hot._selfAccepted&&u[_]!==f&&!d.c[_].hot._selfInvalidated&&w.push({module:_,require:d.c[_].hot._requireSelf,errorHandler:d.c[_].hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete o[e]})),n=void 0;for(var r,t=l.slice();t.length>0;){var i=t.pop(),a=d.c[i];if(a){var c={},u=a.hot._disposeHandlers;for(D=0;D<u.length;D++)u[D].call(null,c);for(d.hmrD[i]=c,a.hot.active=!1,delete d.c[i],delete s[i],D=0;D<a.children.length;D++){var f=d.c[a.children[D]];f&&(e=f.parents.indexOf(i))>=0&&f.parents.splice(e,1)}}}for(var p in s)if(d.o(s,p)&&(a=d.c[p]))for(E=s[p],D=0;D<E.length;D++)r=E[D],(e=a.children.indexOf(r))>=0&&a.children.splice(e,1)},apply:function(e){for(var r in u)d.o(u,r)&&(d.m[r]=u[r]);for(var n=0;n<t.length;n++)t[n](d);for(var o in s)if(d.o(s,o)){var a=d.c[o];if(a){E=s[o];for(var c=[],f=[],p=0;p<E.length;p++){var h=E[p],m=a.hot._acceptedDependencies[h];if(m){if(-1!==c.indexOf(m))continue;c.push(m),f.push(h)}}for(var v=0;v<c.length;v++)try{c[v].call(null,E)}catch(r){i.onErrored&&i.onErrored({type:"accept-errored",moduleId:o,dependencyId:f[v],error:r}),i.ignoreErrored||e(r)}}}for(var y=0;y<w.length;y++){var g=w[y],b=g.module;try{g.require(b)}catch(r){if("function"==typeof g.errorHandler)try{g.errorHandler(r)}catch(n){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:b,error:n,originalError:r}),i.ignoreErrored||e(n),e(r)}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:b,error:r}),i.ignoreErrored||e(r)}}return l}}}self.webpackHotUpdateajs=(e,n,o)=>{for(var a in n)d.o(n,a)&&(r[a]=n[a]);o&&t.push(o),i[e]&&(i[e](),i[e]=void 0)},d.hmrI.jsonp=function(e,o){r||(r={},t=[],n=[],o.push(c)),d.o(r,e)||(r[e]=d.m[e])},d.hmrC.jsonp=function(i,s,l,u,f,p){f.push(c),e={},n=s,r=l.reduce((function(e,r){return e[r]=!1,e}),{}),t=[],i.forEach((function(r){d.o(o,r)&&void 0!==o[r]&&(u.push(a(r)),e[r]=!0)})),d.f&&(d.f.jsonpHmr=function(r,n){e&&!d.o(e,r)&&d.o(o,r)&&void 0!==o[r]&&(n.push(a(r)),e[r]=!0)})},d.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(d.p+d.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),d(753)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,